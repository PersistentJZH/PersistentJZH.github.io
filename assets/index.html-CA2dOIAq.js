import{_ as i,c as a,e,o as t}from"./app-DIgjTPbY.js";const n={};function l(h,s){return t(),a("div",null,s[0]||(s[0]=[e(`<h3 id="例子-kubelet-监控-pod-清单变化" tabindex="-1"><a class="header-anchor" href="#例子-kubelet-监控-pod-清单变化"><span><strong>例子：Kubelet 监控 Pod 清单变化</strong></span></a></h3><p>Kubelet 主要通过 <strong>静态 Pod 文件</strong> 和 <strong>API Server 下发的 Pod</strong> 两种方式获取 Pod 配置，并监控其变化。下面分别举例说明：</p><hr><h2 id="_1-监控本地静态-pod-文件变化-static-pod" tabindex="-1"><a class="header-anchor" href="#_1-监控本地静态-pod-文件变化-static-pod"><span><strong>1. 监控本地静态 Pod 文件变化（Static Pod）</strong></span></a></h2><p><strong>场景</strong>：</p><ul><li>管理员在节点上的 <code>/etc/kubernetes/manifests/</code> 目录（默认路径）手动放置或修改 Pod 的 YAML 文件。</li><li>Kubelet 会监控该目录，自动创建、更新或删除 Pod。</li></ul><p><strong>示例步骤</strong>：</p><ol><li><p><strong>创建静态 Pod</strong></p><div class="language-bash" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 在 Master/Worker 节点的 /etc/kubernetes/manifests/ 目录下创建 nginx Pod</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">cat</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">EOF</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> |</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> sudo</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> tee</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /etc/kubernetes/manifests/nginx-static-pod.yaml</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">apiVersion: v1</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">kind: Pod</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">metadata:</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  name: nginx-static-pod</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">spec:</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  containers:</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  - name: nginx</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    image: nginx:1.25</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    ports:</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    - containerPort: 80</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">EOF</span></span></code></pre></div></li><li><p><strong>Kubelet 自动检测并创建 Pod</strong></p><div class="language-bash" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 查看 Pod 是否运行（在 Master 节点上）</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">kubectl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> get</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pods</span></span></code></pre></div><p>输出示例：</p><div class="language-" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>NAME                  READY   STATUS    RESTARTS   AGE</span></span>
<span class="line"><span>nginx-static-pod-node1   1/1     Running   0          10s</span></span></code></pre></div><blockquote><p>注意：静态 Pod 的名称会附带节点名称（如 <code>-node1</code>）。</p></blockquote></li><li><p><strong>修改静态 Pod（触发更新）</strong><br> 修改 <code>/etc/kubernetes/manifests/nginx-static-pod.yaml</code>，比如更换镜像版本：</p><div class="language-yaml" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-yaml"><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">image</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> nginx:1.26</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  # 从 1.25 改为 1.26</span></span></code></pre></div><ul><li>Kubelet 检测到文件变化后，会<strong>删除旧 Pod 并创建新 Pod</strong>（滚动更新）。</li></ul></li><li><p><strong>删除静态 Pod</strong></p><div class="language-bash" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sudo</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> rm</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /etc/kubernetes/manifests/nginx-static-pod.yaml</span></span></code></pre></div><ul><li>Kubelet 检测到文件删除后，会自动终止 Pod。</li></ul></li></ol><hr><h2 id="_2-监控-api-server-下发的-pod-变化-动态-pod" tabindex="-1"><a class="header-anchor" href="#_2-监控-api-server-下发的-pod-变化-动态-pod"><span><strong>2. 监控 API Server 下发的 Pod 变化（动态 Pod）</strong></span></a></h2><p><strong>场景</strong>：</p><ul><li>用户通过 <code>kubectl</code> 或 Deployment 等控制器创建 Pod。</li><li>Kubelet 监听 API Server 的 Pod 变更事件，并管理对应 Pod。</li></ul><p><strong>示例步骤</strong>：</p><ol><li><p><strong>通过 <code>kubectl</code> 创建 Pod</strong></p><div class="language-bash" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">kubectl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> apply</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -f</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> -</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">EOF</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">apiVersion: v1</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">kind: Pod</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">metadata:</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  name: nginx-api-pod</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">spec:</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  containers:</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  - name: nginx</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    image: nginx:1.25</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    ports:</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    - containerPort: 80</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">EOF</span></span></code></pre></div></li><li><p><strong>Kubelet 接收并启动 Pod</strong></p><ul><li>API Server 将 Pod 配置下发给对应节点的 Kubelet。</li><li>Kubelet 调用容器运行时（如 Containerd）创建容器。</li></ul></li><li><p><strong>修改 Pod（触发更新）</strong><br> 更新 Pod 的镜像版本：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">kubectl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> edit</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pod</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> nginx-api-pod</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  # 修改 image: nginx:1.26</span></span></code></pre></div><ul><li>由于 Pod 是<strong>不可变对象</strong>，Kubelet 会直接<strong>删除旧 Pod 并创建新 Pod</strong>（类似静态 Pod）。</li><li>如果是 Deployment，则会触发滚动更新（由 Controller 管理，Kubelet 只执行单 Pod 的生命周期操作）。</li></ul></li><li><p><strong>删除 Pod</strong></p><div class="language-bash" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">kubectl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> delete</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pod</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> nginx-api-pod</span></span></code></pre></div><ul><li>API Server 通知 Kubelet 终止 Pod。</li></ul></li></ol><hr><h2 id="_3-监控-http-endpoint-实验性功能" tabindex="-1"><a class="header-anchor" href="#_3-监控-http-endpoint-实验性功能"><span><strong>3. 监控 HTTP Endpoint（实验性功能）</strong></span></a></h2><p><strong>场景</strong>：</p><ul><li>Kubelet 通过 <code>--pod-manifest-url</code> 参数从 Web 服务器动态获取 Pod 配置（需启用 <code>DynamicKubeletConfig</code>）。</li><li>当 URL 返回的 Pod 配置变化时，Kubelet 会更新 Pod。</li></ul><p><strong>示例</strong>（需特殊配置）：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 启动 Kubelet 时指定远程 Manifest URL</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">kubelet</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --pod-manifest-url=http://your-webserver/pod-manifest.yaml</span></span></code></pre></div><hr><h3 id="关键区别-静态-pod-vs-api-server-pod" tabindex="-1"><a class="header-anchor" href="#关键区别-静态-pod-vs-api-server-pod"><span><strong>关键区别：静态 Pod vs API Server Pod</strong></span></a></h3><table><thead><tr><th>特性</th><th>静态 Pod (Static Pod)</th><th>API Server Pod (动态 Pod)</th></tr></thead><tbody><tr><td>管理方式</td><td>节点本地文件</td><td>由 API Server 下发</td></tr><tr><td>适用场景</td><td>控制平面组件（如 kube-apiserver）</td><td>普通业务 Pod</td></tr><tr><td>修改方式</td><td>直接修改节点上的文件</td><td>通过 <code>kubectl</code> 或 Controller</td></tr><tr><td>是否受 Deployment 管理</td><td>❌ 否</td><td>✅ 是（如 Deployment/StatefulSet）</td></tr><tr><td>删除方式</td><td>删除文件</td><td><code>kubectl delete pod</code></td></tr></tbody></table><hr><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span><strong>总结</strong></span></a></h3><ul><li><strong>静态 Pod</strong>：适用于不受 API Server 直接管理的场景（如自举 Kubernetes 控制平面）。</li><li><strong>API Server Pod</strong>：常规 Pod，由集群统一管理。</li><li><strong>HTTP Endpoint</strong>：实验性功能，适用于动态配置分发。</li></ul><p>Kubelet 会持续监控这些来源的 Pod 变化，并确保实际状态与期望状态一致！</p>`,27)]))}const p=i(n,[["render",l]]),r=JSON.parse('{"path":"/article/9xyds5s1/","title":"kubelet会watch哪些外部变化?？","lang":"zh-CN","frontmatter":{"title":"kubelet会watch哪些外部变化?？","createTime":"2025/07/19 00:51:13","permalink":"/article/9xyds5s1/","description":"例子：Kubelet 监控 Pod 清单变化 Kubelet 主要通过 静态 Pod 文件 和 API Server 下发的 Pod 两种方式获取 Pod 配置，并监控其变化。下面分别举例说明： 1. 监控本地静态 Pod 文件变化（Static Pod） 场景： 管理员在节点上的 /etc/kubernetes/manifests/ 目录（默认路径）...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"kubelet会watch哪些外部变化?？\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-19T10:09:51.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://blog.jianzhihao.icu/article/9xyds5s1/"}],["meta",{"property":"og:site_name","content":"ZH Blog"}],["meta",{"property":"og:title","content":"kubelet会watch哪些外部变化?？"}],["meta",{"property":"og:description","content":"例子：Kubelet 监控 Pod 清单变化 Kubelet 主要通过 静态 Pod 文件 和 API Server 下发的 Pod 两种方式获取 Pod 配置，并监控其变化。下面分别举例说明： 1. 监控本地静态 Pod 文件变化（Static Pod） 场景： 管理员在节点上的 /etc/kubernetes/manifests/ 目录（默认路径）..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-19T10:09:51.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-19T10:09:51.000Z"}]]},"readingTime":{"minutes":2.67,"words":802},"git":{"createdTime":1752918887000,"updatedTime":1752919791000,"contributors":[{"name":"zhihao","username":"zhihao","email":"mac@192.168.8.154","commits":3,"avatar":"https://avatars.githubusercontent.com/zhihao?v=4","url":"https://github.com/zhihao"}],"changelog":[{"hash":"e1699efe04ef4f67512a049d5a89a300e8dc242a","time":1752919791000,"email":"mac@192.168.8.154","author":"zhihao","message":"add"},{"hash":"6eb799a1ac184e34a985458578af9f9f9f0d4764","time":1752919534000,"email":"mac@192.168.8.154","author":"zhihao","message":"a"},{"hash":"f7ba4d6a34000eeaefeea17b2912d7bfc82eb888","time":1752918887000,"email":"mac@192.168.8.154","author":"zhihao","message":"change file name"}]},"autoDesc":true,"filePathRelative":"博客/测试folder/测试子folder/ee.md","headers":[],"categoryList":[{"id":"c50d13","sort":10000,"name":"博客"},{"id":"3439a2","sort":10001,"name":"测试folder"},{"id":"06bfd6","sort":10002,"name":"测试子folder"}]}');export{p as comp,r as data};
