import{_ as t,c as e,e as i,b as l,r as n,o as h}from"./app-DIgjTPbY.js";const r={};function o(d,s){const a=n("Mermaid");return h(),e("div",null,[s[0]||(s[0]=i(`<p>kind create cluster --name calico-cluster --config - &lt;&lt;EOF kind: Cluster apiVersion: kind.x-k8s.io/v1alpha4 nodes:</p><ul><li>role: control-plane</li><li>role: worker</li><li>role: worker networking: disableDefaultCNI: true podSubnet: 192.167.0.0/16 EOF</li></ul><p>kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.30.2/manifests/tigera-operator.yaml</p><p>kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.30.2/manifests/custom-resources.yaml</p><h2 id="cat-eof-calicoctl-apply-f" tabindex="-1"><a class="header-anchor" href="#cat-eof-calicoctl-apply-f"><span>cat &lt;&lt;EOF | calicoctl apply -f -</span></a></h2><p>apiVersion: projectcalico.org/v3 kind: IPPool metadata: name: external-pool spec: cidr: 192.168.64.0/24 blockSize: 29 ipipMode: Never natOutgoing: true nodeSelector: &quot;!all()&quot; EOF</p><p>multipass set local.bridged-network.range=10.168.64.0/24</p><h2 id="cat-eof-calicoctl-apply-f-1" tabindex="-1"><a class="header-anchor" href="#cat-eof-calicoctl-apply-f-1"><span>cat &lt;&lt;EOF | calicoctl apply -f -</span></a></h2><p>apiVersion: projectcalico.org/v3 kind: BGPPeer metadata: name: bgppeer-global-host1 spec: peerIP: 192.168.64.5 asNumber: 64512 EOF</p><p>sudo bash -c &quot;cat &gt; /etc/bird/bird.conf &lt;&lt;EOF router id 192.168.64.6;</p><p>protocol kernel { scan time 60; import none; export all; }</p><p>protocol device { scan time 60; }</p><p>protocol bgp k8s_calico { local as 64512; neighbor 172.18.0.3 as 64511; # 将指向Kind节点的IP import all; export none; multihop; } EOF&quot;</p><p>kubectl apply -f - &lt;&lt;EOF apiVersion: projectcalico.org/v3 kind: BGPPeer metadata: name: multipass-peer spec: peerIP: 192.168.64.6 asNumber: 64512 nodeSelector: all() EOF</p><h3 id="_1-节点加入集群" tabindex="-1"><a class="header-anchor" href="#_1-节点加入集群"><span><strong>1. 节点加入集群</strong></span></a></h3><p>当新节点加入 Kubernetes 集群时，Calico 会触发路由宣告，流程如下：</p><ol><li><strong>节点注册</strong>： <ul><li>新节点通过 <code>kubelet</code> 注册到 Kubernetes API Server。</li><li>Calico 的 <code>CNI 插件</code> 为该节点分配 Pod CIDR（如 <code>10.244.3.0/24</code>）。</li></ul></li><li><strong>Felix 检测变化</strong>： <ul><li>Felix 监听 Kubernetes API，发现新节点及分配的 Pod CIDR。</li><li>Felix 在本地配置路由表，确保本机 Pod 可访问新节点的 Pod CIDR。</li></ul></li><li><strong>BIRD 触发 BGP 宣告</strong>： <ul><li>BIRD 检测到新路由（如 <code>10.244.3.0/24</code> 属于新节点），通过 BGP 协议向所有对等体（其他节点）宣告该路由。</li><li>其他节点通过 BGP 学习到新路由，更新内核路由表。</li></ul></li></ol><p><strong>关键日志</strong>（通过 <code>journalctl -u bird</code> 查看）：</p><div class="language-" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>BGP: Sending UPDATE to neighbor 192.168.100.3: Added 10.244.3.0/24</span></span></code></pre></div><hr><h3 id="_2-节点离开或故障" tabindex="-1"><a class="header-anchor" href="#_2-节点离开或故障"><span><strong>2. 节点离开或故障</strong></span></a></h3><ol><li><strong>节点失联</strong>： <ul><li>BGP 会话因节点宕机或网络中断而断开（默认 Keepalive 超时为 90 秒）。</li></ul></li><li><strong>路由撤回</strong>： <ul><li>BIRD 检测到对等体失效，自动触发 <code>WITHDRAW</code> 消息，通知其他节点撤销该节点的路由（如 <code>10.244.3.0/24</code>）。</li></ul></li><li><strong>集群收敛</strong>： <ul><li>其他节点删除失效路由，流量不再转发至故障节点。</li></ul></li></ol><p><strong>影响</strong>：</p><ul><li>若故障节点恢复，BGP 会话重新建立，路由会重新宣告。</li></ul><hr><h3 id="_3-pod-创建或删除" tabindex="-1"><a class="header-anchor" href="#_3-pod-创建或删除"><span><strong>3. Pod 创建或删除</strong></span></a></h3><ol><li><strong>Pod 创建</strong>： <ul><li>Calico 的 <code>IPAM</code> 从 Pod CIDR 中分配 IP（如 <code>10.244.1.5</code>）。</li><li>Felix 在主机添加该 Pod 的直连路由（无需 BGP 宣告，因为属于本地 CIDR）。</li></ul></li><li><strong>Pod 跨节点通信</strong>： <ul><li>只有 <strong>Pod CIDR 的子网</strong>（如 <code>10.244.1.0/24</code>）会通过 BGP 宣告，单个 Pod IP 不会单独广播。</li><li>其他节点通过已学习的 Pod CIDR 路由，结合主机的 ARP 解析，定位具体 Pod。</li></ul></li></ol><p><strong>例外</strong>：</p><ul><li>若启用 <code>host-local</code> IPAM 且 Pod CIDR 耗尽，可能触发新节点加入以扩展地址池。</li></ul><hr><h3 id="_4-网络策略变更" tabindex="-1"><a class="header-anchor" href="#_4-网络策略变更"><span><strong>4. 网络策略变更</strong></span></a></h3><ol><li><strong>策略更新</strong>： <ul><li>修改 <code>NetworkPolicy</code> 可能导致 Felix 重新生成 iptables/eBPF 规则。</li></ul></li><li><strong>路由策略调整</strong>： <ul><li>若策略影响路由（如禁止某些子网通信），BIRD 可能触发路由过滤或重新宣告。</li><li>例如：通过 <code>export filter</code> 限制通告的路由范围。</li></ul></li></ol><hr><h3 id="_5-手动干预" tabindex="-1"><a class="header-anchor" href="#_5-手动干预"><span><strong>5. 手动干预</strong></span></a></h3><ol><li><strong>强制路由刷新</strong>：<div class="language-bash" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">birdc</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> reload</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  # 重新加载 BIRD 配置</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">birdc</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> disable</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> bgp_peer</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  # 临时禁用对等体，再启用以触发路由更新</span></span></code></pre></div></li><li><strong>Calico 配置变更</strong>： <ul><li>修改 <code>BGPConfiguration</code>（如调整 AS 号、启用 RR 模式）会触发全集群路由重新同步。</li></ul></li></ol><hr><h3 id="_6-其他场景" tabindex="-1"><a class="header-anchor" href="#_6-其他场景"><span><strong>6. 其他场景</strong></span></a></h3><table><thead><tr><th><strong>场景</strong></th><th><strong>触发条件</strong></th><th><strong>路由宣告行为</strong></th></tr></thead><tbody><tr><td><strong>集群扩容</strong></td><td>新增多个节点</td><td>每个新节点的 Pod CIDR 被独立宣告</td></tr><tr><td><strong>节点 IP 变更</strong></td><td>主机 IP 更新（如 DHCP 续约）</td><td>BGP 会话重建，路由重新宣告</td></tr><tr><td><strong>BGP 对等体配置变更</strong></td><td>新增/删除 BGP 邻居（如 Spine-Leaf 架构）</td><td>动态调整路由传播范围</td></tr><tr><td><strong>IP 池修改</strong></td><td>调整 <code>IPPool</code> 的 CIDR</td><td>所有受影响节点重新宣告路由</td></tr></tbody></table><hr><h3 id="底层原理-bgp-协议视角" tabindex="-1"><a class="header-anchor" href="#底层原理-bgp-协议视角"><span><strong>底层原理（BGP 协议视角）</strong></span></a></h3><ol><li><strong>路由更新条件</strong>： <ul><li>当 BGP Speaker（如 BIRD）检测到本地路由表变化时（新增/删除路由），会向对等体发送 <code>UPDATE</code> 消息。</li></ul></li><li><strong>收敛机制</strong>： <ul><li>默认采用 <code>Full-Mesh</code> 模式，每个节点直接交换路由。</li><li>在大规模集群中，可通过 <code>Route Reflector (RR)</code> 优化，减少 BGP 连接数。</li></ul></li></ol><hr><h3 id="验证路由宣告" tabindex="-1"><a class="header-anchor" href="#验证路由宣告"><span><strong>验证路由宣告</strong></span></a></h3><ol><li><strong>查看 BGP 邻居状态</strong>：<div class="language-bash" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">calicoctl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> node</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> status</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 或</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">birdc</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> show</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> protocols</span></span></code></pre></div></li><li><strong>检查路由表</strong>：<div class="language-bash" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ip</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> route</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  # 查看内核路由表</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">birdc</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> show</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> route</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  # 查看 BIRD 学习到的路由</span></span></code></pre></div></li><li><strong>抓包分析</strong>：<div class="language-bash" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">tcpdump</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -i</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> eth0</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">tcp port 179</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  # 捕获 BGP 协议流量</span></span></code></pre></div></li></ol><hr><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span><strong>总结</strong></span></a></h3><p>Calico 的路由宣告主要由以下事件触发：</p><ol><li><strong>节点生命周期变化</strong>（加入/离开）。</li><li><strong>Pod CIDR 分配或回收</strong>。</li><li><strong>BGP 会话状态变更</strong>（如对等体断开）。</li><li><strong>策略或配置更新</strong>。</li></ol><p>这种设计确保了集群网络的 <strong>高可用性</strong> 和 <strong>快速收敛</strong>，同时避免了传统 SDN 控制器的单点瓶颈。</p><p>在 Calico 中，<strong>路由宣告的职责</strong>主要由以下组件协作完成，不同场景下由不同组件主导：</p><hr><h3 id="_1-默认场景-pod-网络路由宣告" tabindex="-1"><a class="header-anchor" href="#_1-默认场景-pod-网络路由宣告"><span><strong>1. 默认场景：Pod 网络路由宣告</strong></span></a></h3><h4 id="宣告者-bird-bgp-client" tabindex="-1"><a class="header-anchor" href="#宣告者-bird-bgp-client"><span><strong>宣告者：BIRD（BGP Client）</strong></span></a></h4><ul><li><strong>角色</strong>：Calico 在每个节点上部署的轻量级 BGP 客户端（默认使用 BIRD 或 GoBGP）。</li><li><strong>工作流程</strong>： <ol><li><strong>Felix</strong> 监控本机 Pod 变化，更新本地路由表（如 <code>10.244.1.0/24 via veth-host</code>）。</li><li><strong>BIRD</strong> 检测到路由变化后，通过 BGP 协议向对等体（其他节点或外部路由器）宣告这些路由。</li><li>对等体学习路由后，更新自己的路由表。</li></ol></li><li><strong>关键配置</strong>：<div class="language-yaml" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-yaml"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 查看 Calico 的 BGP 配置</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">calicoctl get bgpconfiguration</span></span></code></pre></div></li><li><strong>日志验证</strong>：<div class="language-bash" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">journalctl</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -u</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> bird</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> |</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> grep</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">UPDATE</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  # 查看 BIRD 宣告的路由</span></span></code></pre></div></li></ul><hr><h3 id="_2-特殊场景-service-cidr-宣告-实验性" tabindex="-1"><a class="header-anchor" href="#_2-特殊场景-service-cidr-宣告-实验性"><span><strong>2. 特殊场景：Service CIDR 宣告（实验性）</strong></span></a></h3><h4 id="宣告者-calico-node-上的-bird" tabindex="-1"><a class="header-anchor" href="#宣告者-calico-node-上的-bird"><span><strong>宣告者：Calico Node 上的 BIRD</strong></span></a></h4><ul><li><strong>触发条件</strong>：需显式配置 <code>BGPConfiguration</code> 中的 <code>serviceClusterIPs</code>。</li><li><strong>配置示例</strong>：<div class="language-yaml" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-yaml"><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">apiVersion</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> projectcalico.org/v3</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">kind</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> BGPConfiguration</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">metadata</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> default</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">spec</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  serviceClusterIPs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    -</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> cidr</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 10.96.0.0/16</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  # Kubernetes Service CIDR</span></span></code></pre></div></li><li><strong>行为</strong>： <ul><li>Calico 会通过 BIRD 将 <code>10.96.0.0/16</code> 作为聚合路由宣告出去。</li><li><strong>注意</strong>：Service IP 的负载均衡仍由 <code>kube-proxy</code> 或 <code>eBPF</code> 处理，BGP 仅负责路由可达性。</li></ul></li></ul><hr><h3 id="_3-高级场景-路由反射器-route-reflector" tabindex="-1"><a class="header-anchor" href="#_3-高级场景-路由反射器-route-reflector"><span><strong>3. 高级场景：路由反射器（Route Reflector）</strong></span></a></h3><h4 id="宣告者-calico-route-reflector-rr" tabindex="-1"><a class="header-anchor" href="#宣告者-calico-route-reflector-rr"><span><strong>宣告者：Calico Route Reflector（RR）</strong></span></a></h4><ul><li><strong>适用场景</strong>：大规模集群中，为避免 Full-Mesh BGP 连接过多。</li><li><strong>角色</strong>： <ul><li>专用节点作为 RR，集中管理路由宣告。</li><li>其他节点（RR Client）仅与 RR 交换路由，不直接互连。</li></ul></li><li><strong>配置方法</strong>：<div class="language-bash" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 将某节点标记为 Route Reflector</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">calicoctl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> patch</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> node</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> node1</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -p</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">{&quot;spec&quot;: {&quot;bgp&quot;: {&quot;routeReflectorClusterID&quot;: &quot;224.0.0.1&quot;}}}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span></code></pre></div></li></ul><hr><h3 id="_4-外部网络集成" tabindex="-1"><a class="header-anchor" href="#_4-外部网络集成"><span><strong>4. 外部网络集成</strong></span></a></h3><h4 id="宣告者-边界节点-border-node" tabindex="-1"><a class="header-anchor" href="#宣告者-边界节点-border-node"><span><strong>宣告者：边界节点（Border Node）</strong></span></a></h4><ul><li><strong>场景</strong>：需将集群路由（Pod 或 Service）宣告到外部网络（如数据中心路由器）。</li><li><strong>配置</strong>： <ul><li>在边界节点上配置 BGP 对等：</li></ul><div class="language-yaml" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-yaml"><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">apiVersion</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> projectcalico.org/v3</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">kind</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> BGPPeer</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">metadata</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> border-router</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">spec</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  peerIP</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 192.168.100.254</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  # 外部路由器 IP</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  asNumber</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 65000</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">          # 外部 AS 号</span></span></code></pre></div></li></ul><hr><h3 id="组件协作流程图" tabindex="-1"><a class="header-anchor" href="#组件协作流程图"><span><strong>组件协作流程图</strong></span></a></h3>`,68)),l(a,{code:"eJxLy8kvT85ILCpRCHHiUgACt9SczAoFXV27mmeztzybtuHF9vXPp2ysUXDyDHIBKwAxwPJO7gEKT9ctfjqxq0bBvyQjtcgvPyW1OPpp67Ynu6e96Gp63rQzFrcOp/yilNSioPzSktSi6Bf7dj6f2gOx6unMFRBtYLmg1LSc1OSS/CKwAS9ntz3ZsRbDSd6lSalFeaklqcVgVcGpRWWZyakKzp4uQTUKzok5mcn5QKud8/PSMtO5AN56Y+U="}),s[1]||(s[1]=i(`<hr><h3 id="关键总结" tabindex="-1"><a class="header-anchor" href="#关键总结"><span><strong>关键总结</strong></span></a></h3><table><thead><tr><th><strong>路由类型</strong></th><th><strong>宣告者</strong></th><th><strong>依赖组件</strong></th><th><strong>配置方式</strong></th></tr></thead><tbody><tr><td><strong>Pod 路由</strong></td><td>BIRD（每个节点）</td><td>Felix</td><td>自动触发，无需额外配置</td></tr><tr><td><strong>Service 路由</strong></td><td>BIRD（实验性）</td><td>BGPConfiguration</td><td>需显式声明 <code>serviceClusterIPs</code></td></tr><tr><td><strong>外部路由</strong></td><td>边界节点的 BIRD</td><td>BGPPeer</td><td>配置对等体 IP 和 AS 号</td></tr><tr><td><strong>聚合路由</strong></td><td>Route Reflector</td><td>集群拓扑</td><td>标记节点为 RR</td></tr></tbody></table><hr><h3 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题"><span><strong>常见问题</strong></span></a></h3><h4 id="q1-为什么我的-pod-路由没有宣告出去" tabindex="-1"><a class="header-anchor" href="#q1-为什么我的-pod-路由没有宣告出去"><span><strong>Q1：为什么我的 Pod 路由没有宣告出去？</strong></span></a></h4><ul><li>检查 BGP 会话状态：<div class="language-bash" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">calicoctl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> node</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> status</span></span></code></pre></div></li><li>确认 BGP 已启用：<div class="language-bash" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">calicoctl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> get</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> bgpconfig</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -o</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> yaml</span></span></code></pre></div></li></ul><h4 id="q2-service-路由宣告失败如何排查" tabindex="-1"><a class="header-anchor" href="#q2-service-路由宣告失败如何排查"><span><strong>Q2：Service 路由宣告失败如何排查？</strong></span></a></h4><ul><li>验证配置：<div class="language-bash" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">calicoctl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> get</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> bgpconfiguration</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -o</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> yaml</span></span></code></pre></div></li><li>检查 BIRD 日志：<div class="language-bash" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">journalctl</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -u</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> bird</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> |</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> grep</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">service</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre></div></li></ul><h4 id="q3-如何限制路由宣告范围" tabindex="-1"><a class="header-anchor" href="#q3-如何限制路由宣告范围"><span><strong>Q3：如何限制路由宣告范围？</strong></span></a></h4><p>使用 <code>exportFilter</code> 过滤路由：</p><div class="language-yaml" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-yaml"><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">apiVersion</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> projectcalico.org/v3</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">kind</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> BGPConfiguration</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">spec</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  nodeToNodeMeshEnabled</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  serviceClusterIPs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    -</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> cidr</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 10.96.0.0/16</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  exportFilter</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    -</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> action</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Deny</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">      matchExpression</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">!has(10.244.0.0/16)</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  # 只允许 10.244.0.0/16 的路由</span></span></code></pre></div>`,12))])}const k=t(r,[["render",o]]),g=JSON.parse('{"path":"/k8s/1q63pwfs/","title":"📦Calico原理分析","lang":"zh-CN","frontmatter":{"title":"📦Calico原理分析","createTime":"2025/08/12 22:03:59","permalink":"/k8s/1q63pwfs/","description":"kind create cluster --name calico-cluster --config - <<EOF kind: Cluster apiVersion: kind.x-k8s.io/v1alpha4 nodes: role: control-plane role: worker role: worker networking: disa...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"📦Calico原理分析\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-13T15:11:46.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://blog.jianzhihao.icu/k8s/1q63pwfs/"}],["meta",{"property":"og:site_name","content":"ZH Blog"}],["meta",{"property":"og:title","content":"📦Calico原理分析"}],["meta",{"property":"og:description","content":"kind create cluster --name calico-cluster --config - <<EOF kind: Cluster apiVersion: kind.x-k8s.io/v1alpha4 nodes: role: control-plane role: worker role: worker networking: disa..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-13T15:11:46.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-13T15:11:46.000Z"}]]},"readingTime":{"minutes":6.18,"words":1853},"git":{"createdTime":1755092670000,"updatedTime":1755097906000,"contributors":[{"name":"zhihao","username":"zhihao","email":"mac@zhihaomac.local","commits":2,"avatar":"https://avatars.githubusercontent.com/zhihao?v=4","url":"https://github.com/zhihao"}],"changelog":[{"hash":"b14e6181535ae1948c566c3579bb41b2ebd924aa","time":1755097906000,"email":"mac@zhihaomac.local","author":"zhihao","message":"add calico"},{"hash":"6a272eac072f3a24fb0b185a226bdba357b43947","time":1755092670000,"email":"mac@zhihaomac.local","author":"zhihao","message":"add calico"}]},"autoDesc":true,"filePathRelative":"notes/k8s/2. 网络/Calico/3.Calico原理分析.md","headers":[]}');export{k as comp,g as data};
